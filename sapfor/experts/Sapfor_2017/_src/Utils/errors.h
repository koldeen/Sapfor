#pragma once
#include <string>

enum typeMessage { WARR, ERROR, NOTE };
extern std::pair<std::string, int> currProcessing; // file and line, default ["", -1]

// GROUP:
// 10xx - analysis
// 20xx - transform
// 30xx - parallel

// 10xx ANALISYS GROUP
//   01 "bad directive position, it can be placed only"
//   02 "variable '%s' is not used in loop"
//   03 "variable '%s' is not changed in loop"
//   04 "dimention of array '%s' is %d, but must be 1"
//   05 "type of array '%s' but must be INTEGER"
//   06 "type of variable '%s' must be array"
//   07 "array size can't be computed"
//   08 "size of array '%s' is %d, but you enter %d"
//   09 "array '%s' is private"
//   10 "only positive numbers are supported"
//   11 "no such expression '%s' on loop"
//   12 "More information is required about sizes of array '%s'"
//   13 "Function '%s' needs to be inlined ..."
//   14 "Found recursive chain calls: %s, this function will be ignored"
//   15 "This function is not called in current project"
//   16 "Can not calculate count of iterations for this loop, information about iterations in all loops in parallel regions '%s' will be ignored"
//   17 "Can not find declaration for symbol '%s' in current scope"
//   18 "This loop does not have END DO format"
//   19 "Include '%s' has executable operators"
//   20 "Active DVM directives are not supported yet"
//   21 "array ref '%s' has more than one loop's variables"
//   22 "array ref '%s' has indirect access"
//   23 "can not calculate index expression for array ref '%s'"
//   24 "coefficient A in A*x+B is not positive for array ref '%s', inverse distribution in not supported yet"
//   25 "can not map write to array '%s' to this loop"
//   26 "write to non distributed array '%s' in this loop"
//   27 --- FREE
//   28 "Module with name '%s' must be placed in current file"
//   29 lowlevel warnings from private analyzer
//   30 lowlevel notes from private analyzer
//   31 "wrong parallel region identifier: variable '%s' was declarated on line %d"
//   32 "wrong parallel region identifier: variable '%s' was declarated in common block '%s'"
//   33 "parallel region '%s' is included in file '%s'"
//   34 "parallel regions '%s' and '%s' are crossed"
//   35 "parallel region '%s' has data statement(s)"
//   36 "Can not build align graph from user's DVM directives in this region"
//   37 "Array can not be distributed because of DVM's I/O constraints"
//   38 "An equivalence operator at line %d is not supported yet"
//   39 "Variabled '%s' and '%s' in one storage association (common block '%s') have different types" 
//   40 "First %d dimensions of array '%s' were deprecated to distributon due to function call '%s'"
//   41 "parallel region '%s' has line included in another region"
//   42 "distributed array in common block %s must have declaration in main unit"
//   43 "bad directive expression"
//   44 "Only pure procedures were supported"
//   45 "function's argument '%s' does not have declaration statement"
//   46 "mismatch of count formal and actual parameters "
//   47 "inconsistent array use"
//   48 "the same function name in different places was found"
//   49 "reasons of non pure function" 
//   50 "count of PROGRAM unit"
//   51 "Detected mpi call, turn on special regime of paralyzing"
//   52 "error in user DVM intervals"
//   53 "variable in shrink clause must be arrayy in file '%s' on line %d"
//   54 "length of mask for array '%s' must be %d, but you enter only %d dimenions in file '%s' on line %d"
//   55 "wrong mask value in %d position: it can be only 0 or 1 in file '%s' on line %d"
//   56 "array '%s' in shrink clause must be also declared in private clause in file '%s' on line %d"

// 20xx TRANSFORM GROUP
//   01 "can not convert array assign to loop"
//   02 "converted arithmetic IF to simple IF"
//   03 "can not convert to END DO loop"
//   04 "convert to END DO loop"
//   05 "loops on lines %d and %d were combined"
//   06 "substitute statement function with name '%s'"
//   07 "Internal error during unparsing process has occurred"
//   08 "Can not do PRIVATE EXPANSION for this loop - privates not found"
//   09 "Can not split this loop because of dependecy: %s"
//   10 "This loop has indirect child loops  and can not be splitted\n"

// 30xx PARALLEL GROUP
//   01 "add across dependencies by array '%s' to loop"
//   02 "add private scalar '%s' to loop on line %d"
//   03 "add reduction scalar '%s' with operation '%s' to loop on line %d"
//   04 "unknown type of reduction scalar '%s'"
//   05 "unknown scalar dependencies by '%s' (try to specify its type)"
//   06 "... prevents parallelization"
//   07 "Can not create distributed link for array '%s': dim size of this array is '%d' and it is not equal '%d'"
//   08 "internal error in analysis, parallel directives will not be generated for this file!"
//   09 "Added remote access for array ref '%s' can significantly reduce performance"
//   10 "Can not find arrays for distribution for parallel region '%s', ignored"
//   11 "Arrays have different align rules in this loop according to their write accesses"
//   12 "parallel regions %shave common function '%s' which is used inside them"
//   13 "parallel regions %shave local array '%s' which is used inside them"
//   14 "parallel region '%s' has common array '%s' which is used inside and outside region"
//   15 "parallel region '%s' does not have DVM interval for fragment"
//   16 "expected only assign operands in DVM interval"
//   17 "parallel region '%s' does not have copying of array '%s' in DVM interval"
//   18 "parallel region '%s' does not have copying of common array '%s' in DVM interval"
//   19 "Can not find execution time for this loop, try to get times statistic"
//   20 "detected distributed and non distributed array links by function's calls for array %s\n"
//   21 "empty parallel regions is forbidden"

// 40xx LOW LEVEL WARNINGS
//   01 
//   02 Wrong pure declaration - INTENT mismatch

extern int langOfMessages;
struct Messages
{
private:
    //explicit Messages(const typeMessage type, const int line, const std::string &value_) : Messages(type, line, value_, 0) { }
    explicit Messages(const typeMessage type, const int line, const std::wstring &value_, const int group) : type(type), line(line), group(group)
    {
        value = value_;
        //check for \n at the end
        if (value[value.size() - 1] == '\n')
            value.erase(value.begin() + value.size() - 1);
        //check for '.' at the end
        if (value[value.size() - 1] != '.')
            value += '.';
        //check for capital letter
#ifdef _WIN32
        const wchar_t fS = value[0];
        if (fS >= L'a' && fS <= L'z')
            value[0] = L'A' + (value[0] - L'a');
        if (fS >= L'à' && fS <= L'ÿ')
            value[0] = L'À' + (value[0] - L'à');
#endif
        //TODO: convert to upper case for test between '___'
    }
public:
    explicit Messages(const typeMessage type, const int line, const std::wstring &rus, const std::wstring &eng, const int group) : 
        Messages(type, line, (langOfMessages == 1) ? rus : eng, group) { }

    std::wstring toString()
    {
        std::wstring retVal = L"|";
        retVal += std::to_wstring((int)type) + L" ";
        retVal += std::to_wstring(line) + L" ";
        retVal += std::to_wstring(group);
        retVal += L"|" + value;
        return retVal; 
    }

public:
    typeMessage type;
    int group;
    int line;
    std::wstring value;
};

// from Utils.cpp
#ifdef _WIN32
extern void printStackTrace();
#else
static void printStackTrace() { };
#endif

#if __SPC
#define printInternalError(file, line) do {\
    char buf[512];\
    sprintf(buf, "Internal error at line %d and file %s\n", line, file);\
    addToGlobalBufferAndPrint(buf);\
    throw(-1);\
} while (0)
#else
#define printInternalError(file, line) do {\
    printStackTrace(); \
    char buf[512];\
    sprintf(buf, "Internal error at line %d and file %s\n", line, file);\
    addToGlobalBufferAndPrint(buf);\
\
    if (currProcessing.first != "" && currProcessing.second != -1)\
    { \
       sprintf(buf, "Internal error in user code at line %d and file %s\n", currProcessing.second, currProcessing.first.c_str());\
       addToGlobalBufferAndPrint(buf);\
    } \
    throw(-1);\
} while (0)
#endif

#define checkNull(address, file, line) do { \
    if ((address) == NULL) \
        printInternalError(file, line); \
} while (0)

//TODO: count of string len of all parameters
#define allocAndPrint(buf, format, ...) do { \
   const int bufLen = 32 * 1024 * 1024;\
   buf = new char[bufLen];\
   const int countW = sprintf(buf, format, ##__VA_ARGS__);\
   if (countW + 1 > bufLen) \
   { \
        delete []buf; \
        printInternalError(__FILE__, __LINE__);\
   } \
} while (0)

#ifdef _WIN32
#define allocAndPrintLong(buf, format, ...) do { \
   const int bufLen = 32 * 1024 * 1024;\
   buf = new wchar_t[bufLen];\
   const int countW = swprintf(buf, format, ##__VA_ARGS__);\
   if (countW + 1 > bufLen) \
   { \
        delete []buf; \
        printInternalError(__FILE__, __LINE__);\
   } \
} while (0)
#else
#define allocAndPrintLong(buf, format, ...) do { \
   const int bufLen = 32 * 1024 * 1024;\
   buf = new wchar_t[bufLen];\
   const int countW = swprintf(buf, bufLen, format, ##__VA_ARGS__);\
   if (countW + 1 > bufLen) \
   { \
        delete []buf; \
        printInternalError(__FILE__, __LINE__);\
   } \
} while (0)
#endif

#define __spf_printToBuf(outval, format, ...) do {\
    char *buf = NULL; \
    allocAndPrint(buf, format, ##__VA_ARGS__); \
    outval = std::string(buf);\
    delete []buf;\
} while (0)

#define __spf_printToLongBuf(outval, format, ...) do {\
    wchar_t *buf = NULL; \
    allocAndPrintLong(buf, format, ##__VA_ARGS__); \
    outval = std::wstring(buf);\
    delete []buf;\
} while (0)

#define __spf_print(needPrint, format, ...) do {\
    if (needPrint == 1) {\
        char *buf = NULL; \
        allocAndPrint(buf, format, ##__VA_ARGS__); \
        addToGlobalBufferAndPrint(buf);\
        delete []buf;\
    } \
} while (0)

//russian messages
#ifdef _WIN32
//1001
static const wchar_t *R1 = L"Íåâåðíîå ðàñïîëîæåíèå äèðåêòèâû: ìîæíî ðàñïîëàãàòü òîëüêî %ls %ls %ls";
static const wchar_t *R2 = L"Íåâåðíîå âûðàæåíèå: ñëèøêîì ìíîãî ïåðåìåííûõ öèêëà";
static const wchar_t *R3 = L"Íåâåðíîå âûðàæåíèå: âîçìîæíî òîëüêî âèäà a * i + b";
static const wchar_t *R4 = L"Íåâåðíîå ðàñïîëîæåíèå äèðåêòèâû: äëÿ îáëàñòè '%s' îæèäàåòñÿ 'SPF END PARALLEL_REG_DIR', à áûëà ïîëó÷åíà 'SPF PARALLEL_REG_DIR'";
static const wchar_t *R5 = L"Íåâåðíîå ðàñïîëîæåíèå äèðåêòèâû: äëÿ îáëàñòè '%s' îæèäàåòñÿ 'SPF END PARALLEL_REG_DIR'";
static const wchar_t *R6 = L"Íåâåðíîå ðàñïîëîæåíèå äèðåêòèâû: äëÿ îáëàñòè '%s' îæèäàåòñÿ 'SPF END PARALLEL_REG_DIR'";
static const wchar_t *R7 = L"Íåâåðíîå ðàñïîëîæåíèå äèðåêòèâû: îæèäàåòñÿ 'SPF PARALLEL_REG_DIR', à áûëà ïîëó÷åíà 'SPF END PARALLEL_REG_DIR'";
static const wchar_t *R8 = L"Íåâåðíîå ðàñïîëîæåíèå äèðåêòèâû: îæèäàåòñÿ 'SPF PARALLEL_REG_DIR' â òîé æå îáëàñòè âèäèìîñòè";
static const wchar_t *R9 = L"Íåâåðíîå ðàñïîëîæåíèå äèðåêòèâû: îæèäàåòñÿ 'SPF PARALLEL_REG_DIR'";
static const wchar_t *R10 = L"Íå ïðàâèëüíàÿ ðàññòàíîâêà îáëàñòè ðàñïàðàëëåëèâàíèÿ: åñòü íåñêîëüêî âõîäîâ âî ôðàãìåíò '%s', âûçâàííûå îïåðàòîðîì ENTRY";
static const wchar_t *R11 = L"Íå ïðàâèëüíàÿ ðàññòàíîâêà îáëàñòè ðàñïàðàëëåëèâàíèÿ: åñòü íåñêîëüêî âõîäîâ âî ôðàãìåíò '%s', âûçâàííûå îïåðàòîðîì GOTO";
static const wchar_t *R12 = L"Íåïðàâèëüíîå ðàñïîëîæåíèå ñòðîê: ìîæíî âûáèðàòü ñòðîêè òîëüêî â èñïîëíÿåìîé ÷àñòè êîäà";
static const wchar_t *R13 = L"Íåïðàâèëüíîå ðàñïîëîæåíèå ñòðîê: íà÷àëî íå ìîæåò áûòü áîëüøå êîíöà";
static const wchar_t *R14 = L"Íåïðàâèëüíîå ðàñïîëîæåíèå ñòðîê: íà÷àëî è êîíåö ïðè ðàñøèðåíèè íå ìîãóò ëåæàòü â ðàçíûõ îáëàñòÿõ";
static const wchar_t *R15 = L"Íåïðàâèëüíîå ïîëîæåíèå ñòðîêè: íà÷àëî è êîíåö íå ìîãóò áûòü â íåÿâíûõ ôðàãìåíòàõ";
static const wchar_t *R16 = L"Íåïðàâèëüíîå ïîëîæåíèå ñòðîê: íà÷àëî è êîíåö íå ìîãóò áûòü â ðàçíûõ ôóíêöèÿõ";
static const wchar_t *R17 = L"Íåïðàâèëüíîå ðàñïîëîæåíèå ñòðîê: âûäåëåííûé ôðàãìåíò ïðè ðàñøèðåíèè íå äîëæåí âêëþ÷àòü ôðàãìåíòû ðàçíûõ îáëàñòåé";
static const wchar_t *R18 = L"Íåïðàâèëüíîå ðàñïîëîæåíèå ñòðîê: íà÷àëî è êîíåö äîëæíû áûòü â îäíîé îáëàñòè âèäèìîñòè";
static const wchar_t *R19 = L"Íåïðàâèëüíîå ðàñïîëîæåíèå ñòðîê %d-%d: íåëüçÿ îáúåäèíèòü ôðàãìåíòû â ðàçíûõ îáëàñòÿõ âèäèìîñòè";
static const wchar_t *R20 = L"Íåïðàâèëüíîå ðàñïîëîæåíèå ñòðîê: íà÷àëî è êîíåö äîëæíû áûòü â îäíîé îáëàñòè âèäèìîñòè";
//1002
static const wchar_t *R21 = L"Ïåðåìåííàÿ '%s' íå èñïîëüçóåòñÿ â öèêëå";
static const wchar_t *R22 = L"Ïåðåìåííàÿ '%s' íå èñïîëüçóåòñÿ â öèêëå";
//1003
static const wchar_t *R23 = L"Ïåðåìåííàÿ '%s' íå èçìåíÿåòñÿ â öèêëå";
static const wchar_t *R24 = L"Ïåðåìåííàÿ '%s' íå èçìåíÿåòñÿ â öèêëå";
//1004
static const wchar_t *R25 = L"Ðàçìåðíîñòü ìàññèâà '%s' %d, à äîëæíà áûòü 1";
//1005
static const wchar_t *R26 = L"Òèï ìàññèâà '%s' äîëæåí áûòü INTEGER";
//1006
static const wchar_t *R27 = L"Òèïîì ïåðåìåííîé '%s' äîëæåí áûòü ìàññèâ";
static const wchar_t *R28 = L"Ïåðåìåííàÿ '%s' íå ÿâëÿåòñÿ ìàññèâîì";
static const wchar_t *R29 = L"Ïåðåìåííàÿ '%s' íå ÿâëÿåòñÿ ìàññèâîì";
//1007
static const wchar_t *R30 = L"Ðàçìåð ìàññèâà íå ìîæåò áûòü âû÷èñëåí";
//1008
static const wchar_t *R31 = L"Ðàçìåð ìàññèâà '%s' %d, à âû ââîäèòå %d";
static const wchar_t *R32 = L"Ðàçìåðíîñòü ìàññèâà '%s' %d, à âû ââîäèòå %d";
//1009
static const wchar_t *R33 = L"Ìàññèâ '%s' ÿâëÿåòñÿ ïðèâàòíûì";
static const wchar_t *R34 = L"Ìàññèâ '%s' ÿâëÿåòñÿ ïðèâàòíûì";
//1010
static const wchar_t *R35 = L"Ðàçðåøåíû òîëüêî ïîëîæèòåëüíûå ÷èñëà";
//1011
static const wchar_t *R36 = L"Íåò òàêîãî âûðàæåíèÿ '%s' â öèêëå";
//1012
static const wchar_t *R37 = L"Íåâîçìîæíî îïðåäåëèòü ðàçìåðû ìàññèâà '%s'";
static const wchar_t* R149 = L"Íåâîçìîæíî îïðåäåëèòü ðàçìåðû öèêëà '%s'";
//1013
static const wchar_t *R38 = L"Îòëè÷àåòñÿ êîëè÷åñòâî ôîðìàëüíûõ è ôàêòè÷åñêèõ ïàðàìåòðîâ äëÿ ôóíêöèè '%s'"; //Òðåáóåòñÿ âûïîëíèòü ïîäñòàíîâêó ôóíêöèè '%s', òàê êàê 
static const wchar_t *R39 = L"Îòëè÷àåòñÿ òèï ôàêòè÷åñêîãî (%s : %s) è ôîðìàëüíîãî (%s : %s) %d-ãî ïàðàìåòðà äëÿ ôóíêöèè '%s'"; //Òðåáóåòñÿ âûïîëíèòü ïîäñòàíîâêó ôóíêöèè '%s', òàê êàê 
static const wchar_t *R40 = L"Òðåáóåòñÿ âûïîëíèòü ïîäñòàíîâêó ôóíêöèè '%s', òàê êàê ìîæíî ïåðåäàâàòü ìàññèâû òîëüêî öåëèêîì";
static const wchar_t *R41 = L"Òðåáóåòñÿ âûïîëíèòü ïîäñòàíîâêó ôóíêöèè '%s' èç-çà îáðàùåíèÿ ê íåïðèâàòíîìó ìàññèâó '%s' â öèêëå íà ñòðîêå %d %s";
static const wchar_t *R42 = L"Òðåáóåòñÿ âûïîëíèòü ïîäñòàíîâêó ôóíêöèè '%s' èç-çà îáðàùåíèÿ ê íåïðèâàòíîìó ìàññèâó '%s' %s";
static const wchar_t *R43 = L"Òðåáóåòñÿ ïîäñòàâèòü ôóíêöèþ '%s' èç-çà ðàçíîé ðàçìåðíîñòè ìàññèâà %s', ïåðåäàâàåìîãî â êà÷åñòâå ïàðàìåòðà: ðàçìåðíîñòü ôîðìàëüíîãî ïàðàìåòðà = %d è ôàêòè÷åñêîãî ïàðàìåòðà = %d";
static const wchar_t *R44 = L"Îáíàðóæåíî íåñîîòâåòñòâèå òèïîâ â ôóíêöèè '%s' â ôîðìàëüíîì è ôàêòè÷åñêîì ïàðàìåòðå äëÿ ìàññèâà '%s'\n";
static const wchar_t *R45 = L"Íåîáõîäèìî ïîäñòàâèòü ôóíêöèþ '%s', òàê êàê ÷åðåç ïàðàìåòð %d ïåðåäàåòñÿ èòåðàöèîííàÿ ïåðåìåííàÿ öèêëà íà ñòðîêå %d è îíà èñïîëüçóåòñÿ â èíäåêñíîì âûðàæåíèè â îáðàùåíèè ê ìàññèâó â òåëå ýòîé ôóíêöèè";
//1014
static const wchar_t *R46 = L"Áûëà íàéäåíà ðåêóðñèâíàÿ öåïî÷êà âûçîâîâ: %s, äàííàÿ ôóíêöèÿ èñêëþ÷åíà èç ðàññìîòðåíèÿ";
//1015
static const wchar_t *R47 = L"Äàííàÿ ôóíêöèÿ íå âûçûâàåòñÿ â äàííîì ïðîåêòå";
//1016
static const wchar_t *R48 = L"Íåâîçìîæíî âû÷èñëèòü êîëè÷åñòâî èòåðàöèé äàííîãî öèêëà, èíôîðìàöèÿ î êîëè÷åñòâå èòåðàöèé äëÿ âñåõ îñòàëüíûõ öèêëîâ â îáëàñòè ðàñïàðàëëåëèâàíèÿ '%s' áóäåò ïðîèãíîðèðîâàíà";
//1017
static const wchar_t *R49 = L"Íåâîçìîæíî íàéòè îïðåäåëåíèå äëÿ ñèìâîëà '%s' â äàííîé îáëàñòè âèäèìîñòè";
//1018
static const wchar_t *R50 = L"Äàííûé öèêë íå â END DO ôîðìàòå";
static const wchar_t *R51 = L"Äàííûé öèêë íå â END DO ôîðìàòå";
//1019
static const wchar_t *R52 = L"Âêëþ÷àåìûé ôàéë '%s' ñîäåðæèò èñïîëíÿåìûå îïåðàòîðû, ÷òî çàïðåùåíî ê ðàñïàðàëëåëèâàíèþ â ñèñòåìå SAPFOR";
//1020
static const wchar_t *R53 = L"Àêòèâíûå DVM-äèðåêòèâû íå ïîääåðæèâàþòñÿ (íåîáõîäèìî âêëþ÷èòü îïöèþ <<Ó÷èòûâàòü DVM-äèðåêòèâû>>)";
//1021
static const wchar_t *R54 = L"Îáðàùåíèå ê ìàññèâó '%s' ñîäåðæèò áîëåå îäíîé èíäåêñíîé ïåðåìåííîé öèêëîâ";
static const wchar_t *R55 = L"Îáðàùåíèå ê ìàññèâó '%s' íå ñîäåðæèò èòåðàöèîííûõ ïåðåìåííûõ öèêëîâ";
//1022
static const wchar_t *R56 = L"Îáðàùåíèå ê ìàññèâó '%s' èìååò êîñâåííóþ àäðåñàöèþ";
//1023
static const wchar_t *R57 = L"Íåâîçìîæíî âû÷èñëèòü èíäåêñíîå âûðàæåíèå â îáðàùåíèè ê ìàññèâó '%s'";
//1024
static const wchar_t *R58 = L"Êîýôôèöèåíò A â ëèíåéíîì îáðàùåíèè A*x+B ê ìàññèâó '%s' íå ìîæåò áûòü îòðèöàòåëüíûì, òàê êàê èíâåðñíîå ðàñïðåäåëåíèå íå ïîääåðæèâàåòñÿ";
//1025
static const wchar_t *R59 = L"Íåâîçìîæíî ñîïîñòàâèòü îáðàùåíèå ê ìàññèâó íà çàïèñü '%s' ñ äàííûìè öèêëîì";
//1026
static const wchar_t *R60 = L"Îáíàðóæåí îïåðàòîð çàïèñè â íåðàñïðåäåëåííûé ìàññèâ '%s', ñâÿçàííûé ñ äàííûì öèêëîì";
static const wchar_t *R61 = L"Îáíàðóæåí îïåðàòîð çàïèñè â íåðàñïðåäåëåííûé ìàññèâ '%s', ñâÿçàííûé ñ äàííûì öèêëîì";
//1027
//--- FREE
//1028
static const wchar_t *R62 = L"Îïèñàíèå ìîäóëÿ '%s' äîëæíî íàõîäèòüñÿ â äàííîì ôàéëå";
//1029
//--- TODO
//1030
//--- TODO
//1031
static const wchar_t *R63 = L"Íåâåðíîå èìÿ îáëàñòè: èìÿ '%s' óæå îáúÿâëåíî íà ñòðîêå %d";
//1032
static const wchar_t *R64 = L"Íåâåðíîå èìÿ îáëàñòè: èìÿ '%s' óæå îáúÿâëåíî â common-áëîêå '%s'";
//1033
static const wchar_t *R65 = L"Îáëàñòü ðàñïàðàëëåëèâàíèÿ '%s' âêëþ÷àåò ñàìó ñåáÿ â ôàéëå '%s'";
//1034
static const wchar_t *R66 = L"Íåâåðíîå ðàñïîëîæåíèå îáëàñòè: íå ñóùåñòâóåò common-áëîêà â ôàéëå %s ñî ñëåäóþùèìè ìàññèâàìè:%s";
//1035
//--- TODO
//1036
static const wchar_t *R67 = L"Íåâîçìîæíî ïîñòðîèòü äåðåâî âûðàâíèâàíèÿ â äàííîé îáëàñòè ðàñïàðàëëåëèâàíèÿ, èñïîëüçóÿ ïîëüçîâàòåëüñêèå DVM-äèðåêòèâû";
//1037
static const wchar_t *R68 = L"Ìàññèâ '%s' íå ìîæåò áûòü ðàñïðåäåëåí èç-çà îãðàíè÷åíèé ââîäà/âûâîäà, íàêëàäûâàåìûõ DVM ñèñòåìîé";
//1038
static const wchar_t *R69 = L"Îïåðàòîð PAUSE ÿâëÿåòñÿ çàïðåùåííûì â ïàðàëëåëüíîé ïðîãðàììå";
static const wchar_t *R70 = L"Îïåðàòîð EQUIVALENCE íå ïîääåðæèâàåòñÿ íà äàííûé ìîìåíò";
//1039
static const wchar_t *R71 = L"Ïåðåìåííûå '%s' è '%s' íàõîäÿòñÿ â îäíîé îáëàñòè àññîöèàöèè (common block '%s'), íî èìåþò ðàçíûå òèïû (ôàéëû - %s:%d è %s:%d)";
//1040
static const wchar_t *R72 = L"Ïåðâûå %d èçìåðåíèé ìàññèâà '%s' çàïðåùåíû ê ðàñïðåäåëåíèþ èç-çà ïåðåäà÷è ê ôóíêöèþ '%s'";
static const wchar_t *R73 = L"Ïåðâîå èçìåðåíèå ìàññèâà '%s' çàïðåùåíî ê ðàñïðåäåëåíèþ èç-çà ïåðåäà÷è â ôóíêöèþ '%s'";
//1041
static const wchar_t *R74 = L"Îáëàñòü ðàñïàðàëëåëèâàíèÿ '%s'ñîäåðæèò ñòðîêó, êîòîðàÿ âêëþ÷åíà â äðóãóþ îáëàñòü";
//1042
static const wchar_t *R75 = L"Ðàñïðåäåëåííûé ìàññèâ '%s' ñîñòîÿùèé â common áëîêå '%s' äîëæåí èìåòü îïèñàíèå â ãëàâíîé ïðîãðàììíîé åäèíèöå";
//1043
static const wchar_t *R76 = L"Íåâåðíîå âûðàæåíèå â äèðåêòèâå: îæèäàåòñÿ ñïèñîê ïåðåìåííûõ";
static const wchar_t *R77 = L"Íåâåðíîå âûðàæåíèå â äèðåêòèâå: îæèäàåòñÿ %d òåñíî-âëîæåííûõ öèêëîâ íà ñòðîêå %d, íî èõ âñåãî %d";
static const wchar_t *R78 = L"Íåâåðíîå âûðàæåíèå â äèðåêòèâå: îæèäàåòñÿ ïåðåìåííàÿ '%s' íà ïîçèöèè %d";
//1044
static const wchar_t *R79 = L"Ïîääåðæèâàþòñÿ ôóíêöèè òîëüêî áåç ïîáî÷íûõ ýôôåêòîâ";
static const wchar_t *R80 = L"Ïîääåðæèâàþòñÿ ôóíêöèè òîëüêî áåç ïîáî÷íûõ ýôôåêòîâ";
//1045
static const wchar_t *R81 = L"Àðãóìåíò '%s' ôóíêöèè '%s' íå èìååò îïåðàòîðà îïèñàíèÿ";
//1046
static const wchar_t *R82 = L"Êîëè÷åñòâî ôîðìàëüíûõ è ôàêòè÷åñêèõ ïàðàìåòðîâ íå îäèíàêîâî äëÿ âûçîâà äàííîé ôóíêöèè '%s'";
static const wchar_t *R83 = L"Êîëè÷åñòâî ôîðìàëüíûõ è ôàêòè÷åñêèõ ïàðàìåòðîâ íå îäèíàêîâî äëÿ âûçîâà äàííîé ôóíêöèè '%s'";
static const wchar_t *R84 = L"Êîëè÷åñòâî ôîðìàëüíûõ è ôàêòè÷åñêèõ ïàðàìåòðîâ íå îäèíàêîâî äëÿ âûçîâà äàííîé ôóíêöèè '%s'";
//1047
static const wchar_t *R85 = L"%d èçìåðåíèå ìàññèâà '%s' íå ìîæåò áûòü ðàñïðåäåëåíî èç-çà ðàçëè÷íûõ îòîáðàæåíèé íà öèêëû â îïåðàöèÿõ ïðèñâàèâàíèé";
static const wchar_t *R86 = L"Ìàññèâ '%s' íå ìîæåò áûòü ðàñïðåäåëåí, òàê êàê âñå åãî èçìåðåíèÿ çàïðåùåíû ê ðàñïðåäåëåíèþ";
static const wchar_t *R87 = L"Ìàññèâ '%s' íå ìîæåò áûòü ðàñïðåäåëåí";
static const wchar_t *R88 = L"Ìàññèâ '%s' íå ìîæåò áûòü ðàñïðåäåëåí";
static const wchar_t *R89 = L"Ìàññèâ '%s' íå ìîæåò áûòü ðàñïðåäåëåí";
static const wchar_t *R90 = L"Ìàññèâ '%s' íå ìîæåò áûòü ðàñïðåäåëåí èç-çà èñïîëüçîâàíèÿ RESHAPE";
static const wchar_t *R91 = L"Ìàññèâ '%s' íå ìîæåò áûòü ðàñïðåäåëåí";
//1048
static const wchar_t *R92 = L"Ôóíêöèÿ '%s' ñ îäèíàêîâûì èìåíåì áûëà îáúÿâëåíà â áîëåå, ÷åì îäíîì ìåñòå: â ôàéëå '%s':%d è '%s':%d";
//1049
static const wchar_t *R93 = L"Ôóíêöèÿ íå ÿâëÿåòñÿ ÷èñòîé (áåç ïîáî÷íûõ ýôôåêòîâ) èç-çà íàëè÷èÿ äàííîãî îïåðàòîðà";
//1050
static const wchar_t *R146 = L"Íàéäåíà áîëåå, ÷åì îäíà ãëàâíàÿ ïðîãðàììíàÿ åäèíèöà (PROGRAM)";
static const wchar_t *R147 = L"Íå íàéäåíà íè îäíà ãëàâíàÿ ïðîãðàììíàÿ åäèíèöà (PROGRAM)";
//1051
static const wchar_t *R148 = L"Îáíàðóæåíû âûçîâû MPI-ôóíêöèé, âêëþ÷åí ðåæèì ñïåöèàëüíûé ðåæèì ðàñïàðàëëåëèâàíèÿ MPI-ïðîãðàìì";
//1052
static const wchar_t *R150 = L"Îøèáêà â ðàññòàíîâêå ïîëüçîâàòåëüñêèõ èíòåðâàëîâ - íå óäàëîñü íàéòè êîíåö èíòåðâàëà";
//1053
static const wchar_t *R154 = L"Îøèáêà â âûðàæåíèè SHRINK êëàóçû: ïåðåìåííàÿ äîëæíà áûòü ìàññèâîì â ôàéëå '%s'";
//1054
static const wchar_t *R155 = L"Äëèíà ìàñêè äëÿ ìàññèâà '%s' äîëæíà áûòü ðàâíà %d, íî óêàçàíî òîëüêî %d èçìåðåíèé â ôàéëå '%s'";
//1055
static const wchar_t *R156 = L"Îøèáêà â âûðàæåíèè ìàñêè íà %d ïîçèöèè ìàññèâà '%s': â êà÷åñòâå çíà÷åíèÿ ìîãóò áûòü òîëüêî 0 è 1 â ôàéëå '%s'";
//1056
static const wchar_t *R157 = L"Ìàññèâ '%s' â äèðåêòèâå shrink òàêæå äîëæåí áûòü îáúÿâëåí â äèðåêòèâå private â ôàéëå '%s'";

//2001
static const wchar_t *R94 = L"Íåâîçìîæíî àâòîìàòè÷åñêè ïðåîáðàçîâàòü äàííîå ïðèñâàèâàíèå ê öèêëó";
static const wchar_t *R95 = L"Íåâîçìîæíî àâòîìàòè÷åñêè ïðåîáðàçîâàòü äàííîå ïðèñâàèâàíèå ê öèêëó";
//2002
static const wchar_t *R96 = L"Àðèôìåòè÷åñêèé IF áûë ïðåîáðàçîâàí â IF-ENDIF";
static const wchar_t *R97 = L"Âû÷èñëÿåìûé GOTO áûë ïðåîáðàçîâàí â IF-ENDIF";
//2003
static const wchar_t *R98 = L"Íåâîçìîæíî àâòîìàòè÷åñêè ïðåîáðàçîâàòü öèêë â END DO ôîðìàò";
//2004
static const wchar_t *R99 = L"Öèêë áûë ïðåîáðàçîâàí â END DO ôîðìàò";
//2005
static const wchar_t *R100 = L"Öèêëû íà ñòðîêàõ %d è %d áûëè îáúåäèíåíû";
//2006
static const wchar_t *R101 = L"Áûëà âûïîëíåíà ïîäñòàíîâêà ìàêðîñà ñ èìåíåì '%s'";
//2007
static const wchar_t *R102 = L"Âîçíèêëà íåïðåäâèäåííàÿ ñèòóàöèÿ âî âðåìÿ ãåíåðàöèè âûõîäíîãî òåêñòà";
static const wchar_t *R103 = L"Âîçíèêëà íåïðåäâèäåííàÿ ñèòóàöèÿ âî âðåìÿ ãåíåðàöèè âûõîäíîãî òåêñòà";
//2008
// -- TODO 
//2009
static const wchar_t *R104 = L"Íåâîçìîæíî ðàçäåëèòü äàííûé öèêë èç-çà ñëåäóþùåé çàâèñèìîñòè: %s";
//2010
static const wchar_t *R105 = L"Äàííûé öèêë ñîäåðæèò êîñâåííûå ïîäöèêëû, ïîýòîìó íå ìîæåò áûòü ðàçäåëåí";
static const wchar_t *R106 = L"Ó äàííîãî öèêëà åñòü îãðàíè÷åíèå íà ðàñïàðàëëåëèâàíèå (â ñòðîêå ";
static const wchar_t *R107 = L"Ó äàííîãî öèêëà åñòü çàâèñèìîñòè, êîòîðûå íåëüçÿ ïðîàíàëèçèðîâàòü, ïîýòîìó îí íå ìîæåò áûòü ðàçäåëåí (â ñòðîêå ";

//3001
static const wchar_t *R108 = L"Äîáàâëåíà across-çàâèñèìîñòü ê ìàññèâó '%s' â öèêëå";
//3002
static const wchar_t *R109 = L"Äîáàâëåíà ïðèâàòíàÿ ïåðåìåííàÿ '%s' ê öèêëó íà ñòðîêå %d";
//3003
static const wchar_t *R110 = L"Äîáàâëåíà ðåäóêöèîííàÿ ïåðåìåííàÿ '%s' ñ òèïîì îïåðàöèè '%s' ê öèêëó íà ñòðîêå %d";
//3004
static const wchar_t *R111 = L"Íåèçâåñòíûé òèï ðåäóêöèîííîé îïåðàöèè ïî ñêàëÿðó '%s'";
//3005
static const wchar_t *R112 = L"Íåèçâåñòíàÿ çàâèñèìîñòü ïî ñêàëÿðíîé ïåðåìåííîé '%s' (ïîïðîáóéòå âðó÷íóþ ñïåöèôèöèðîâàòü åå òèï)";
//3006
static const wchar_t *R113 = L"Íåèçâåñòíàÿ çàâèñèìîñòü ïî ìàññèâó ïðåïÿòñòâóåò ðàñïàðàëëåëèâàíèþ äàííîãî öèêëà";
static const wchar_t *R114 = L"Íåèçâåñòíàÿ çàâèñèìîñòü ïî ñêàëÿðó ïðåïÿòñòâóåò ðàñïàðàëëåëèâàíèþ äàííîãî öèêëà";
static const wchar_t *R115 = L"Âíåøíèå èëè âíóòðåííèå îïåðàòîðû ïåðåõîäà (GOTO) ïðåïÿòñòâóþò ðàñïàðàëëåëèâàíèþ äàííîãî öèêëà";
static const wchar_t *R116 = L"Îïåðàòîðû ââîäà/âûâîäà ïðåïÿòñòâóþò ðàñïàðàëëåëèâàíèþ äàííîãî öèêëà";
static const wchar_t *R117 = L"Îïåðàòîðû STOP ïðåïÿòñòâóþò ðàñïàðàëëåëèâàíèþ äàííîãî öèêëà";
static const wchar_t *R118 = L"Îáíàðóæåíû êîíôëèêòíûå ïðèñâàèâàíèÿ, êîòîðûå ïðåïÿòñòâóþò ðàñïàðàëëåëèâàíèþ äàííîãî öèêëà";
static const wchar_t *R119 = L"Íåâîçìîæíîñòü ñîïîñòàâèòü îáðàùåíèå ê ìàññèâó íà çàïèñü ïðåïÿòñòâóåò ðàñïàðàëëåëèâàíèþ äàííîãî öèêëà";
static const wchar_t *R120 = L"Êîñâåííàÿ àäðåñàöèÿ ïî ðàñïðåäåëÿåìîìó ìàññèâó ïðåïÿòñòâóåò ðàñïàðàëëåëèâàíèþ äàííîãî öèêëà";
static const wchar_t *R121 = L"Îáðàùåíèå ê íåðàñïðåäåëåííîìó ìàññèâó íà çàïèñü ïðåïÿòñòâóåò ðàñïàðàëëåëèâàíèþ äàííîãî öèêëà";
static const wchar_t *R122 = L"Íàéäåíû ðàçëè÷íûå ïðàâèëà âûðàâíèâàíèÿ ìàññèâîâ, èñïîëüçóåìûõ íà çàïèñü â äàííîì öèêëå, ïðåïÿòñòâóåò ðàñïàðàëëåëèâàíèþ";
static const wchar_t *R123 = L"Ïðîöåäóðû ñ ïîáî÷íûì ýôôåêòíîì ïðåïÿòñòâóþò ðàñïàðàëëåëèâàíèþ äàííîãî öèêëà";
static const wchar_t *R144 = L"Îáíàðóæåíî íå ïðÿìîóãîëüíîå ïðîñòðàíñòâî èòåðàöèé, ÷òî ïðåïÿòñòâóåò ðàñïàðàëëåëèâàíèþ äàííîãî öèêëà";
static const wchar_t *R145 = L"Îáíàðóæåíû DVM èíòåðâàëû âíóòðè öèêëà, ÷òî ïðåïÿòñòâóåò ðàñïàðàëëåëèâàíèþ äàííîãî öèêëà";
//--TODO R124 R125 ïðî íåîïðåäåëåííóþ äëèíó çàâèñèìîñòè 
//3007
static const wchar_t *R126 = L"Íåâîçìîæíî ñîçäàòü ñ øàáëîíîì äëÿ ìàññèâà '%s': ðàçìåðíîñòü ìàññèâà '%d' è ýòî íå ðàâíî '%d'";
static const wchar_t *R127 = L"Íåâîçìîæíî ñîïîñòàâèòü âûðàâíèâàíèÿ ìàññèâîâ, ïåðåäàâàåìûõ â ïðîöåäóðó";
//3008
static const wchar_t *R128 = L"Âíóòðåííÿÿ îøèáêà àíàëèçà, ðàñïàðàëëåëèâàíèå íå áóäåò âûïîëíåíî äëÿ äàííîãî ôàéëà!";
//3009
static const wchar_t *R129 = L"Äîáàâëåííûé REMOTE_ACCESS äëÿ îáðàùåíèÿ ê ìàññèâó '%s' ìîæåò ïðèâåñòè ê ñèëüíîìó çàìåäëåíèþ";
//3010
static const wchar_t *R130 = L"Íå îáíàðóæåíû ìàññèâû èëè ñâîáîäíûå öèêëû äëÿ ðàñïðåäåëåíèÿ â äàííîì ïðîåêòå";
static const wchar_t *R131 = L"Íå îáíàðóæåíû ìàññèâû èëè ñâîáîäíûå öèêëû äëÿ ðàñïðåäåëåíèÿ â äàííîé îáëàñòè ðàñïàðàëëåëèâàíèÿ";
//3011
static const wchar_t *R132 = L"Ó ìàññèâîâ '%s' è '%s' ðàçíûå ïðàâèëà âûðàâíèâàíèÿ ñîãëàñíî îáðàùåíèþ íà çàïèñü â â äàííîì öèêëå";
//3012
static const wchar_t *R133 = L"Îáëàñòè ðàñïàðàëëåëèâàíèÿ %sèìåþò îáùóþ èñïîëüçóåìóþ ôóíêöèþ '%s'";
//3013
static const wchar_t *R134 = L"Îáëàñòè ðàñïàðàëëåëèâàíèÿ %sèìåþò îáùèé èñïîëüçóåìûé ëîêàëüíûé ìàññèâ '%s'";
static const wchar_t *R152 = L"Îáëàñòè ðàñïàðàëëåëèâàíèÿ %sèìåþò îáùèé èñïîëüçóåìûé ìàññèâ èç ìîäóëÿ '%s'";
//3014
static const wchar_t *R135 = L"Îáëàñòü ðàñïàðàëëåëèâàíèÿ '%s' ñîäåðæèò common-ìàññèâ '%s', èñïîëüçóåìûé â îáëàñòè è âíå å¸";
//3015
static const wchar_t *R136 = L"Îáëàñòü ðàñïàðàëëåëèâàíèÿ '%s' íå èìååò DVM-èíòåðâàëà äëÿ ôðàãìåíòà";
//3016
static const wchar_t *R137 = L"Íåâîçìîæíî ñ÷èòàòü DVM-ñòàòèñòèêó äëÿ ïîëó÷åíèÿ âðåìåí";
//3017
static const wchar_t *R138 = L"Îáëàñòü ðàñïàðàëëåëèâàíèÿ '%s' íå ñîäåðæèò êîïèðîâàíèÿ ìàññèâà '%s' â DVM-èíòåðâàëå";
//3018
static const wchar_t *R139 = L"Îáëàñòü ðàñïàðàëëåëèâàíèÿ '%s' íå ñîäåðæèò êîïèðîâàíèÿ ìàññèâà '%s' â DVM-èíòåðâàëå";
//3019
//--- TODO ïðåäèêòîð
//3020
static const wchar_t *R140 = L"Îáíàðóæåí ìàññèâ '%s', ÿâëÿþùèéñÿ ïàðàìåòðîì ôóíêöèè, â êîòîðóþ ïåðåäàþòñÿ êàê ðàñïðåäåëåííûå, òàê è íå ðàñïðåäåëåííûå ìàññèâû. Âîçìîæíî, ñòîèò çàïðåòèòü ê ðàñïðåäåëåíèþ îáíàðóæåííûå ìàññèâû, ëèáî ïðîäóáëèðîâàòü ñîîòâåòñòâóþùóþ ôóíêöèþ.\n";
static const wchar_t *R141 = L"Îáíàðóæåí ðàñïðåäåëÿåìûé ìàññèâ '%s', ïåðåäàâàåìûé â êà÷åñòâå ïàðàìåòðà â ïðîöåäóðó\n";
static const wchar_t* R153 = L"Îáíàðóæåí íå ðàñïðåäåëÿåìûé ìàññèâ '%s', ïåðåäàâàåìûé â êà÷åñòâå ïàðàìåòðà â ïðîöåäóðó\n";
static const wchar_t *R142 = L"Äëÿ ìàññèâà '%s' íå óäàåòñÿ íàéòè åäèíîãî ðàñïðåäåëåíèÿ, âíóòðåííÿÿ îøèáêà ñèñòåìû.\n";
//3021
static const wchar_t* R151 = L"Ïóñòûå îáëàñòè ðàñïàðàëëåëèâàíèÿ íåäîïóñêàþòñÿ.\n";

//4001
//---TODO îøèáêè èç SAGE
//4002
static const wchar_t *R143 = L"Íåâåðíîå îáúÿâëåíèå PURE ôóíêöèè - îòñóòñòâóþò îïåðàòîðû INTENT";

#endif