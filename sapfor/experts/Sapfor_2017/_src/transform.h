#pragma once

extern int staticShadowAnalysis;
extern int staticPrivateAnalysis;
extern int keepDvmDirectives;
extern int keepSpfDirs;
extern int consoleMode;

extern "C" int out_free_form;

enum passes {
    UNROLL_LOOPS,
    CONVERT_TO_ENDDO,
    CORRECT_CODE_STYLE,
    LOOP_ANALYZER_DATA_DIST_S1,
    LOOP_ANALYZER_COMP_DIST,
    CALL_GRAPH,
    LOOP_GRAPH,
    VERIFY_ENDDO,
    VERIFY_INCLUDE,
    FIND_FUNC_TO_INCLUDE,
    CREATE_DISTR_DIRS, 
    CREATE_PARALLEL_DIRS,
    INSERT_PARALLEL_DIRS,
    ONLY_ARRAY_GRAPH,
    PREPROC_SPF,
    EXTRACT_PARALLEL_DIRS,
    CORRECT_VAR_DECL,
    PREPROC_ALLOCATES,
    CREATE_REMOTES,
    PRIVATE_ANALYSIS_SPF,
    PRIVATE_CALL_GRAPH_STAGE1,
    PRIVATE_CALL_GRAPH_STAGE2,
    FILL_PAR_REGIONS_LINES,
    LOOP_DATA_DEPENDENCIES,
    INSERT_INCLUDES,
    REMOVE_DVM_DIRS,
    VERIFY_DVM_DIRS,
    SUBST_EXPR,
    CALL_GRAPH2,
    REVERT_SUBST_EXPR,
    CREATE_NESTED_LOOPS,
    UNPARSE_FILE,
    CREATE_TEMPLATE_LINKS,
    CODE_CHECKER_PASSES,
    CHECK_FUNC_TO_INCLUDE,
    GET_ALL_ARRAY_DECL,
    INSERT_SHADOW_DIRS,
    EXTRACT_SHADOW_DIRS,
    FILE_LINE_INFO,
    LOOP_ANALYZER_DATA_DIST_S2,
    SUBST_EXPR_AND_UNPARSE,
    BUILD_INCLUDE_DEPENDENCIES,
    EMPTY_PASS
};

enum algorithms {
    CREATE_DISTIBUTION,
    CREATE_ALIGNS,
    EMPTY_ALGO
};

enum optionNames {
    STATIC_SHADOW_ANALYSIS,
    STATIC_PRIVATE_ANALYSIS,
    FREE_FORM,
    KEEP_DVM_DIRECTIVES,
    KEEP_SPF_DIRECTIVES,
    EMPTY_OPTION
};

static const char *passNames[] =
{
    "UNROLL LOOPS",
    "CONVERT TO ENDDO",
    "CORRECT CODE STYLE",
    "LOOP DATA DISTRIBUTION ANALYZER STEP1",
    "LOOP COMPUTE DISTRIBUTION ANALYZER",
    "CALL GRAPH ANALYZER",
    "LOOP GRAPH ANALYZER",
    "END DO CHECKER",
    "INCLUDE CHECKER",
    "FIND FUCTION TO INCLUDE",
    "DISTRIBUTION DIRECTIVES CREATOR",
    "PARALLEL DIRECTIVES CREATOR",
    "PARALLEL DIRECTIVES INSERTER",
    "ONLY ARRAY GRAPH",
    "PREPROCESS SPF DIRS",
    "EXTRACT PARALLEL DIRECTIVES",
    "CORRECT VARIABLE DECLARATION F90 STYLE",
    "PREPROCESS ALLOCATE CALLS",
    "CREATE REMOTES",
    "PRIVATE ANALYSIS",
    "CREATE CALL GRAPH FOR PRIVATE: STEP1",
    "CREATE CALL GRAPH FOR PRIVATE: STEP2",
    "FILL LINES OF PARALLEL REGIONS",
    "LOOP DATA DEPENDENCIES",
    "INCLUDES INSERTER",
    "REMOVE DVM DIRECTIVES",
    "DVM DIRECTIVES CHECKER",
    "SUBSTITUTION OF EXPRESSIONS",
    "CALL GRAPH ANALYZER step2",
    "REVERT SUBSTITUTION OF EXPRESSIONS",
    "CREATE NESTED LOOPS",
    "UNPARSE FILE",
    "CREATE LINKS WITH TEMPLATES",
    "CODE CHECKER PASSES",
    "CHECK FUNCTIONS TO INCLUDE",
    "GET ALL ARRAY DECL",
    "INSERT SHADOW DIRS",
    "EXTRACT SHADOW DIRS",
    "FILE LINE INFO",
    "LOOP DATA DISTRIBUTION ANALYZER STEP2",
    "SUBST EXPR AND UNPARSE",
    "BUILD INCLUDE DEPENDENCIES",
    "EMPTY_PASS"
};

static const char *passesEnumName[] = {
    "UNROLL_LOOPS",
    "CONVERT_TO_ENDDO",
    "CORRECT_CODE_STYLE",
    "LOOP_ANALYZER_DATA_DIST_S1",
    "LOOP_ANALYZER_COMP_DIST",
    "CALL_GRAPH",
    "LOOP_GRAPH",
    "VERIFY_ENDDO",
    "VERIFY_INCLUDE",
    "FIND_FUNC_TO_INCLUDE",
    "CREATE_DISTR_DIRS",
    "CREATE_PARALLEL_DIRS",
    "INSERT_PARALLEL_DIRS",
    "ONLY_ARRAY_GRAPH",
    "PREPROC_SPF",
    "EXTRACT_PARALLEL_DIRS",
    "CORRECT_VAR_DECL",
    "PREPROC_ALLOCATES",
    "CREATE_REMOTES",
    "PRIVATE_ANALYSIS_SPF",
    "PRIVATE_CALL_GRAPH_STAGE1",
    "PRIVATE_CALL_GRAPH_STAGE2",
    "FILL_PAR_REGIONS_LINES",
    "LOOP_DATA_DEPENDENCIES",
    "INSERT_INCLUDES",
    "REMOVE_DVM_DIRS",
    "VERIFY_DVM_DIRS",
    "SUBST_EXPR",
    "CALL_GRAPH2",
    "REVERT_SUBST_EXPR",
    "CREATE_NESTED_LOOPS",
    "UNPARSE_FILE",
    "CREATE_TEMPLATE_LINKS",
    "CODE_CHECKER_PASSES",
    "CHECK_FUNC_TO_INCLUDE",
    "GET_ALL_ARRAY_DECL",
    "INSERT_SHADOW_DIRS",
    "EXTRACT_SHADOW_DIRS",
    "FILE_LINE_INFO",
    "LOOP_ANALYZER_DATA_DIST_S2",
    "SUBST_EXPR_AND_UNPARSE",
    "BUILD_INCLUDE_DEPENDENCIES",
    "EMPTY_PASS"
};

void runPass(const int curr_regime, const char *proj_name = "dvm.proj", const char *folderName = NULL);